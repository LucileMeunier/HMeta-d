key_press == mat$data[, , 1][[i]][[16]][[1]][, 1]
~ 0,
key_press == mat$data[, , 1][[i]][[16]][[2]][, 1]
~ 1
),
stim = case_when(
(resp == 0 & correct == 1) ~ 0,
(resp == 1 & correct == 0) ~ 0,
(resp == 1 & correct == 1) ~ 1,
(resp == 0 & correct == 0) ~ 1
)
)
m_data <- rbind(m_data, current)
}
}
}
# Load in-scanner pre and post-training data ########################################
for (s in subjects) {
files <- NULL
files <- list.files(here("Documents/Data/Training/data/behavioural/neural"),
sprintf("subject0%s_*", s))
for (f in seq_len(length(files))) {
mat <- readMat( paste0(here("Documents/Data/Training/data/behavioural/neural/"), files[f]))
for (i in c(6:9)) {
num_trials <- length(mat$data[, , 1][[i]][, , 1]$trialNum) / 2 # 2 rows for each trial
key_press  <- mat$data[, , 1][[i]][, , 1]$keyPress
correct    <- mat$data[, , 1][[i]][, , 1]$correct
conf       <- mat$data[, , 1][[i]][, , 1]$confResp
rt         <- mat$data[, , 1][[i]][, , 1]$rt
trial      <- mat$data[, , 1][[i]][, , 1]$trialNum
domain     <- unlist(mat$data[, , 1][[i]][, , 1]$task)
type       <- unlist(mat$data[, , 1][[i]][, , 1]$trialType)
run        <- rep((i - 5), num_trials * 2) # run 1-4 (indexing is 6-9 so minus 5)
time       <- mat$data[, , 1][[i]][, , 1]$timeElapsed
if (f == 1) {
session <- rep(f, num_trials * 2)
} else {
session    <- rep(10, num_trials * 2)
}
current <- data.frame("key_press" = key_press,
"correct" = correct,
"confidence" = conf,
"rt" = rt,
"trial" = trial,
"domain" = domain,
"type" = type,
"run" = run,
"time" = time,
"session" = session)
current <- current %>%
add_column(id = s) %>%
filter(rt > 200, key_press != "NaN") %>%
select(-time) %>%
group_by(id, session, trial) %>%
mutate(count = n()) %>%
filter(count == 2) %>%
mutate(resp =
case_when(
key_press == mat$data[, , 1][[i]][[16]][[1]][, 1]
~ 0,
key_press == mat$data[, , 1][[i]][[16]][[2]][, 1]
~ 1
),
stim = case_when(
(resp == 0 & correct == 1) ~ 0,
(resp == 1 & correct == 0) ~ 0,
(resp == 1 & correct == 1) ~ 1,
(resp == 0 & correct == 0) ~ 1
)
)
m_data <- rbind(m_data, current)
}
}
}
head(m_data)
install.packages("dplyr")
install.packages("broom")
install.packages("BayesFactor")
training <- read.csv(here("Documents/Data/Training/results/behavioural/neural/pre_post_data.csv"))
source("~/Documents/Data/Training/analysis/behavioural/clean_data.r")
library(here)
library(dplyr)
library(broom)
library(ez)
library(BayesFactor)
library(bayestestR)
training <- read.csv(here("Documents/Data/Training/results/behavioural/neural/pre_post_data.csv"))
# Calculate summary stats
pre_post_conf <- pre_post %>%
filter(type == "confidence_rating") %>%
group_by(session, domain) %>%
summarise(conf = mean(confidence),
SEM = sd(confidence) / sqrt(length(confidence)))
pre_post <- read.csv(here("Documents/Data/Training/results/behavioural/neural/pre_post_data.csv"))
# Calculate summary stats
pre_post_conf <- pre_post %>%
filter(type == "confidence_rating") %>%
group_by(session, domain) %>%
summarise(conf = mean(confidence),
SEM = sd(confidence) / sqrt(length(confidence)))
pre_post_conf
# mean_conf plot ###############################################################
conf_plot <- ggplot(pre_post_conf,
aes(x = session, y = conf,
group = domain, colour = domain)) +
geom_point(position = dodge, size = 4) +
geom_errorbar(position = dodge, width = 0.3, size = 3,
aes(x = session, ymin = conf - SEM, ymax = conf + SEM)) +
scale_x_continuous(name = "Session", breaks = c(1:2),
labels = (c("pre", "post"))) +
ylab("Metacognitive bias\n(confidence level)") +
ylim(2.6, 3.4) +
plot_theme +
scale_colour_manual(values = c("#96BAD7", "#9668B1"))
dodge <- position_dodge2(width = 0.3)
conf_plot <- ggplot(pre_post_conf,
aes(x = session, y = conf,
group = domain, colour = domain)) +
geom_point(position = dodge, size = 4) +
geom_errorbar(position = dodge, width = 0.3, size = 3,
aes(x = session, ymin = conf - SEM, ymax = conf + SEM)) +
scale_x_continuous(name = "Session", breaks = c(1:2),
labels = (c("pre", "post"))) +
ylab("Metacognitive bias\n(confidence level)") +
ylim(2.6, 3.4) +
plot_theme +
scale_colour_manual(values = c("#96BAD7", "#9668B1"))
theme_set(theme_cowplot())
plot_theme <- list(
theme_classic() +
theme(
panel.background = element_blank(),
strip.background = element_rect(colour = NA, fill = NA),
panel.border = element_rect(fill = NA, color = "black"),
legend.title = element_blank(),
legend.position = "bottom",
axis.title = element_text(face = "bold", size = 35),
axis.text = element_text(face = "bold", size = 30),
legend.text = element_text(face = "bold", size = 30),
plot.title = element_text(face = "bold", hjust = 0.5, size = 34)
)
)
conf_plot <- ggplot(pre_post_conf,
aes(x = session, y = conf,
group = domain, colour = domain)) +
geom_point(position = dodge, size = 4) +
geom_errorbar(position = dodge, width = 0.3, size = 3,
aes(x = session, ymin = conf - SEM, ymax = conf + SEM)) +
scale_x_continuous(name = "Session", breaks = c(1:2),
labels = (c("pre", "post"))) +
ylab("Metacognitive bias\n(confidence level)") +
ylim(2.6, 3.4) +
plot_theme +
scale_colour_manual(values = c("#96BAD7", "#9668B1"))
conf_plot
# Check if required packages are installed ----
packages <- c("cowplot", "readr", "ggplot2", "dplyr", "lavaan", "Hmisc")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
# Load packages ----
library(ggplot2)
# Defining the geom_flat_violin function ----
# Note: the below code modifies the
# existing github page by removing a parenthesis in line 50
"%||%" <- function(a, b) {
if (!is.null(a)) a else b
}
geom_flat_violin <- function(mapping = NULL, data = NULL, stat = "ydensity",
position = "dodge", trim = TRUE, scale = "area",
show.legend = NA, inherit.aes = TRUE, ...) {
layer(
data = data,
mapping = mapping,
stat = stat,
geom = GeomFlatViolin,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(
trim = trim,
scale = scale,
...
)
)
}
#' @rdname ggplot2-ggproto
#' @format NULL
#' @usage NULL
#' @export
GeomFlatViolin <-
ggproto("GeomFlatViolin", Geom,
setup_data = function(data, params) {
data$width <- data$width %||%
params$width %||% (resolution(data$x, FALSE) * 0.9)
# ymin, ymax, xmin, and xmax define the bounding rectangle for each group
data %>%
group_by(group) %>%
mutate(
ymin = min(y),
ymax = max(y),
xmin = x,
xmax = x + width / 2
)
},
draw_group = function(data, panel_scales, coord) {
# Find the points for the line to go all the way around
data <- transform(data,
xminv = x,
xmaxv = x + violinwidth * (xmax - x)
)
# Make sure it's sorted properly to draw the outline
newdata <- rbind(
plyr::arrange(transform(data, x = xminv), y),
plyr::arrange(transform(data, x = xmaxv), -y)
)
# Close the polygon: set first and last point the same
# Needed for coord_polar and such
newdata <- rbind(newdata, newdata[1, ])
ggplot2:::ggname("geom_flat_violin", GeomPolygon$draw_panel(newdata, panel_scales, coord))
},
draw_key = draw_key_polygon,
default_aes = aes(
weight = 1, colour = "grey20", fill = "white", size = 0.5,
alpha = NA, linetype = "solid"
),
required_aes = c("x", "y")
)
if (!require(remotes)) {
install.packages("remotes")
}
remotes::install_github('jorvlan/raincloudplots')
library(raincloudplots)
pre_post_conf
pre_post
pre_post %>%
filter(type == "confidence_rating")
pre_post_conf <- pre_post %>%
filter(type == "confidence_rating") %>%
group_by(id, session, domain) %>%
pre_post_conf <- pre_post %>%
filter(type == "confidence_rating") %>%
group_by(id, session, domain)
pre_post_conf
pre_post_conf <- pre_post %>%
filter(type == "confidence_rating") %>%
group_by(id, session, domain) %>%
summarise(conf = mean(confidence),
SEM = sd(confidence) / sqrt(length(confidence)))
pre_post_conf
pre_post_conf <- pre_post %>%
filter(type == "confidence_rating") %>%
group_by(session, domain, id) %>%
summarise(conf = mean(confidence))
pre_post_conf
pre_post_conf$conf[1:41]
n_sub <- length(pre_post_conf)
n_sub <- sizer(pre_post_conf)
n_sub <- size(pre_post_conf)
n_sub <- length(pre_post_conf$conf)
n_sub/4
(n_sub/4)+1:100
(n_sub/4)+1:n_sub/2
1:n_sub/4
n_sub
1:(n_sub/4)
(n_sub/4)+1:(n_sub/2)
n_sub <- length(pre_post_conf$conf)/4
n_sub <- length(pre_post_conf$conf)/4
1:n_sub
(n_sub+1):(n_sub*2)
(n_sub*2+1):(n_sub*3)
df_2x2 <- data_2x2(
array_1 = pre_post_conf$conf[1:n_sub],
array_2 = pre_post_conf$conf[(n_sub+1):(n_sub*2)],
array_3 = pre_post_conf$conf[(n_sub*2+1):(n_sub*3)],
array_4 = pre_post_conf$conf[(n_sub*3+1):(n_sub*4)],
labels = (c('memory','perception')),
jit_distance = .09,
jit_seed = 321,
spread_x_ticks = FALSE)
conf_2x2 <- data_2x2(
array_1 = pre_post_conf$conf[1:n_sub],
array_2 = pre_post_conf$conf[(n_sub+1):(n_sub*2)],
array_3 = pre_post_conf$conf[(n_sub*2+1):(n_sub*3)],
array_4 = pre_post_conf$conf[(n_sub*3+1):(n_sub*4)],
labels = (c('memory','perception')),
jit_distance = .09,
jit_seed = 321,
spread_x_ticks = FALSE)
conf_2x2
raincloud_2x2 <- raincloud_2x2_repmes(
data = conf_2x2,
colors = (c('dodgerblue', 'darkorange', 'dodgerblue', 'darkorange')),
fills = (c('dodgerblue', 'darkorange', 'dodgerblue', 'darkorange')),
size = 1,
alpha = .6,
spread_x_ticks = FALSE) +
scale_x_continuous(breaks=c(1,2), labels=c("Pre", "Post"), limits=c(0, 3)) +
xlab("Session") +
ylab("Mean confidence") +
theme_classic()
raincloud_2x2
raincloud_2x2 <- raincloud_2x2_repmes(
data = conf_2x2,
colors = (c('dodgerblue', 'darkorange', 'dodgerblue', 'darkorange')),
fills = (c('dodgerblue', 'darkorange', 'dodgerblue', 'darkorange')),
size = 2,
alpha = .6,
spread_x_ticks = FALSE) +
scale_x_continuous(breaks=c(1,2), labels=c("Pre", "Post"), limits=c(0, 3)) +
xlab("Session") +
ylab("Mean confidence") +
theme_classic()
raincloud_2x2
plot_theme <- list(
theme_classic() +
theme(
panel.background = element_blank(),
strip.background = element_rect(colour = NA, fill = NA),
panel.border = element_rect(fill = NA, color = "black"),
legend.title = element_blank(),
legend.position = "bottom",
axis.title = element_text(face = "bold", size = 35),
axis.text = element_text(face = "bold", size = 30),
legend.text = element_text(face = "bold", size = 30),
plot.title = element_text(face = "bold", hjust = 0.5, size = 34)
)
)
# mean_conf plot ###############################################################
raincloud_2x2 <- raincloud_2x2_repmes(
data = conf_2x2,
colors = (c('dodgerblue', 'darkorange', 'dodgerblue', 'darkorange')),
fills = (c('dodgerblue', 'darkorange', 'dodgerblue', 'darkorange')),
size = 2,
alpha = .6,
spread_x_ticks = FALSE) +
scale_x_continuous(breaks=c(1,2), labels=c("Pre", "Post"), limits=c(0, 3)) +
xlab("Session") +
ylab("Mean confidence")
raincloud_2x2
raincloud_2x2 <- raincloud_2x2_repmes(
data = conf_2x2,
colors = (c('dodgerblue', 'darkorange', 'dodgerblue', 'darkorange')),
fills = (c('dodgerblue', 'darkorange', 'dodgerblue', 'darkorange')),
size = 2,
alpha = .6,
spread_x_ticks = FALSE) +
scale_x_continuous(breaks=c(1,2), labels=c("Pre", "Post"), limits=c(0, 3)) +
xlab("Session") +
ylab("Mean confidence") +
theme_classic() +
theme(
panel.background = element_blank(),
strip.background = element_rect(colour = NA, fill = NA),
panel.border = element_rect(fill = NA, color = "black"),
legend.title = element_blank(),
legend.position = "bottom",
axis.title = element_text(face = "bold", size = 35),
axis.text = element_text(face = "bold", size = 30),
legend.text = element_text(face = "bold", size = 30),
plot.title = element_text(face = "bold", hjust = 0.5, size = 34)
)
raincloud_2x2
help("raincloud_2x2_repmes")
edit("raincloud_2x2_repmes")
raincloud_2x2
help("GeomFlatViolin")
source("~/Documents/Data/Training/analysis/behavioural/scanner_behav_analysis.R")
source("~/Documents/Data/Training/analysis/behavioural/scanner_behav_analysis.R")
raincloud_2x2
require(here)
require(dplyr)
require(tibble)
require(ggplot2)
require(R.matlab)
subjects <- c("03", "04", "05", "06", "07", "09", "10", "11", "12", "14", "15",
"16", "17", "18", "19", "21", "22", "23", "24", "25", "26", "27",
"28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38",
"39", "40", "41", "42", "43", "45", "46", "47")
# Load web training session data ####################################
all_data <- NULL
s=23
files <- list.files(here("~/Dropbox/Research/Metacognition/Training/data/behavioural/web/"),
sprintf("subject0%s_session0[2-7].csv", s))
files
source("~/Dropbox/Research/Metacognition/Training/analysis/behavioural/clean_data.r")
library(here)
library(dplyr)
library(broom)
library(ez)
library(BayesFactor)
library(bayestestR)
if (!require(remotes)) {
install.packages("remotes")
}
remotes::install_github('jorvlan/raincloudplots')
library(raincloudplots)
training <- read.csv(here("~/Dropbox/Research/Metacognition/Training/results/behavioural/training_data.csv"))
pre_post <- read.csv(here("~/Dropbox/Research/Metacognition/Training/results/behavioural/neural/pre_post_data.csv"))
#### 1) MEAN CONFIDENCE #####
# Calculate mean confidence in both datasets then combine
train_conf <- training %>%
filter(type == "confidence_rating") %>%
group_by(session, domain) %>%
summarise(conf = mean(confidence))
# Calculate summary stats
pre_post_conf <- pre_post %>%
filter(type == "confidence_rating") %>%
group_by(session, domain, id) %>%
summarise(conf = mean(confidence))
conf <- rbind(train_conf, pre_post_conf)
write.csv(conf, "~/Dropbox/Research/Metacognition/Training/results/behavioural/mean_conf.csv", row.names = F)
# Organise for raincloud plot, pre vs. post
n_sub <- length(pre_post_conf$conf)/4
conf_2x2 <- data_2x2(
array_1 = pre_post_conf$conf[1:n_sub],
array_2 = pre_post_conf$conf[(n_sub+1):(n_sub*2)],
array_3 = pre_post_conf$conf[(n_sub*2+1):(n_sub*3)],
array_4 = pre_post_conf$conf[(n_sub*3+1):(n_sub*4)],
labels = (c('memory','perception')),
jit_distance = .09,
jit_seed = 321,
spread_x_ticks = FALSE)
plot_theme <- list(
theme_classic() +
theme(
panel.background = element_blank(),
strip.background = element_rect(colour = NA, fill = NA),
panel.border = element_rect(fill = NA, color = "black"),
legend.title = element_blank(),
legend.position = "bottom",
axis.title = element_text(face = "bold", size = 35),
axis.text = element_text(face = "bold", size = 30),
legend.text = element_text(face = "bold", size = 30),
plot.title = element_text(face = "bold", hjust = 0.5, size = 34)
)
)
# mean conf, make plot and display
raincloud_2x2 <- raincloud_2x2_repmes(
data = conf_2x2,
colors = (c('dodgerblue', 'darkorange', 'dodgerblue', 'darkorange')),
fills = (c('dodgerblue', 'darkorange', 'dodgerblue', 'darkorange')),
size = 2,
alpha = .6,
spread_x_ticks = FALSE) +
scale_x_continuous(breaks=c(1,2), labels=c("Pre", "Post"), limits=c(0, 3)) +
xlab("Session") +
ylab("Mean confidence") +
theme_classic() +
theme(
panel.background = element_blank(),
strip.background = element_rect(colour = NA, fill = NA),
panel.border = element_rect(fill = NA, color = "black"),
legend.title = element_blank(),
legend.position = "bottom",
axis.title = element_text(face = "bold", size = 35),
axis.text = element_text(face = "bold", size = 30),
legend.text = element_text(face = "bold", size = 30),
plot.title = element_text(face = "bold", hjust = 0.5, size = 34)
)
raincloud_2x2
## stats
# Anova with factors: Training (pre/post) and domain (perception/memory)
data <- pre_post %>%
filter(type == "confidence_rating") %>%
mutate(session = case_when(
session == 1 ~ "pre",
session == 10 ~ "post"
))
data$session <- factor(data$session, c("pre", "post"))
data$domain <- factor(data$domain, c("memory", "perception"))
data$id <- factor(data$id)
data
data$session <- factor(data$session, c("pre", "post"))
data$domain <- factor(data$domain, c("memory", "perception"))
data$id <- factor(data$id)
data
# Repeated measures anova with ezANOVA
model <- ezANOVA(data = data,
wid = id,
within = .(session, domain),
dv = confidence,
type = 3)
model
# Repeated measures Bayesian anova with BayesFactor
models <- anovaBF(
formula = confidence ~ session * domain + id,
whichRandom = "id",
data = data
)
bayesfactor_inclusion(models, match_models = TRUE)
source("Function_metad_group.R")
source("~/Dropbox/Utils/HMeta-d/R/example_metad_group.R")
setwd("~/Dropbox/Utils/HMeta-d/R")
source("Function_metad_group.R")
library(rjags)
install.packages("rjags")
library(rjags)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
install.package("devtools")
install.packages("devtools")
library(devtools)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
